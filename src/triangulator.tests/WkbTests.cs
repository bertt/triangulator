using NUnit.Framework;
using System.IO;
using System.Text;
using Wkx;

namespace Triangulate.Tests
{
    public class Tests
    {
        [Test]
        public void TriangulateWkbTest()
        {
            // "POLYHEDRALSURFACE Z (((-7.750331999966875 -7.355232000350952 1.9086260322265503,-7.812167000025511 -1.4992249999195337 1.9086260322265503,-7.812167000025511 -1.4992249999195337 -2.053857967773439,-7.750331999966875 -7.355232000350952 -2.053857967773439,-7.750331999966875 -7.355232000350952 1.9086260322265503)),((3.968241000082344 -7.231492999941111 1.9086260322265503,-7.750331999966875 -7.355232000350952 1.9086260322265503,-7.750331999966875 -7.355232000350952 -2.053857967773439,3.968241000082344 -7.231492999941111 -2.053857967773439,3.968241000082344 -7.231492999941111 1.9086260322265503)),((3.968241000082344 -7.231492999941111 -2.053857967773439,3.9064060000237077 -1.3754860004410148 -2.053857967773439,3.9064060000237077 -1.3754860004410148 1.9086260322265503,3.968241000082344 -7.231492999941111 1.9086260322265503,3.968241000082344 -7.231492999941111 -2.053857967773439)),((8.803642000071704 -1.3237749999389052 -2.053857967773439,8.712588999886066 7.299309999682009 -2.053857967773439,8.712588999886066 7.299309999682009 2.053861032226564,8.803642000071704 -1.3237749999389052 2.053861032226564,8.803642000071704 -1.3237749999389052 -2.053857967773439)),((8.712588999886066 7.299309999682009 -2.053857967773439,-8.747484999941662 7.114945000037551 -2.053857967773439,-8.747484999941662 7.114945000037551 2.053861032226564,8.712588999886066 7.299309999682009 2.053861032226564,8.712588999886066 7.299309999682009 -2.053857967773439)),((-8.65643099998124 -1.5081399995833635 2.053861032226564,-8.747484999941662 7.114945000037551 2.053861032226564,-8.747484999941662 7.114945000037551 -2.053857967773439,-8.65643099998124 -1.5081399995833635 -2.053857967773439,-8.65643099998124 -1.5081399995833635 2.053861032226564)),((-7.812167000025511 -1.4992249999195337 2.053861032226564,-8.23429899988696 -1.5036829998716712 -2.053857967773439,-7.812167000025511 -1.4992249999195337 1.9086260322265503,-7.812167000025511 -1.4992249999195337 2.053861032226564)),((-7.812167000025511 -1.4992249999195337 1.9086260322265503,-8.23429899988696 -1.5036829998716712 -2.053857967773439,-7.812167000025511 -1.4992249999195337 -2.053857967773439,-7.812167000025511 -1.4992249999195337 1.9086260322265503)),((-8.23429899988696 -1.5036829998716712 -2.053857967773439,-8.65643099998124 -1.5081399995833635 2.053861032226564,-8.65643099998124 -1.5081399995833635 -2.053857967773439,-8.23429899988696 -1.5036829998716712 -2.053857967773439)),((-7.812167000025511 -1.4992249999195337 2.053861032226564,-8.65643099998124 -1.5081399995833635 2.053861032226564,-8.23429899988696 -1.5036829998716712 -2.053857967773439,-7.812167000025511 -1.4992249999195337 2.053861032226564)),((8.803642000071704 -1.3237749999389052 2.053861032226564,6.355023999931291 -1.3496310003101826 -2.053857967773439,8.803642000071704 -1.3237749999389052 -2.053857967773439,8.803642000071704 -1.3237749999389052 2.053861032226564)),((8.803642000071704 -1.3237749999389052 2.053861032226564,3.9064060000237077 -1.3754860004410148 2.053861032226564,6.355023999931291 -1.3496310003101826 -2.053857967773439,8.803642000071704 -1.3237749999389052 2.053861032226564)),((6.355023999931291 -1.3496310003101826 -2.053857967773439,3.9064060000237077 -1.3754860004410148 2.053861032226564,3.9064060000237077 -1.3754860004410148 1.9086260322265503,6.355023999931291 -1.3496310003101826 -2.053857967773439)),((6.355023999931291 -1.3496310003101826 -2.053857967773439,3.9064060000237077 -1.3754860004410148 1.9086260322265503,3.9064060000237077 -1.3754860004410148 -2.053857967773439,6.355023999931291 -1.3496310003101826 -2.053857967773439)),((3.9064060000237077 -1.3754860004410148 2.053861032226564,-7.812167000025511 -1.4992249999195337 2.053861032226564,-7.812167000025511 -1.4992249999195337 1.9086260322265503,3.9064060000237077 -1.3754860004410148 1.9086260322265503,3.9064060000237077 -1.3754860004410148 2.053861032226564)))"
            var buildingWkb = File.ReadAllBytes(@"testdata/building.wkb");

            var wkbTriangulated = Triangulator.Triangulate(buildingWkb);
            var polyhedral = (PolyhedralSurface)Wkx.Geometry.Deserialize<WkbSerializer>(wkbTriangulated);
            Assert.IsTrue(polyhedral.Geometries.Count == 22);

            GltfCreator.CreateGltf(polyhedral, @"wkb.gltf");
        }


        [Test]
        public void TraingulateCubeTest()
        {
            var cubeWkt = "POLYHEDRALSURFACE Z (((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)),((0 0 0, 0 1 0, 0 1 1, 0 0 1, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 1, 1 0 1, 0 0 1, 0 1 1, 1 1 1)),((1 1 1, 1 0 1, 1 0 0, 1 1 0, 1 1 1)),((1 1 1, 1 1 0, 0 1 0, 0 1 1, 1 1 1)))";
            var expectedResult = "POLYHEDRALSURFACE Z (((0 0 0,0 1 0,1 0 0,0 0 0)),((1 1 0,1 0 0,0 1 0,1 1 0)),((0 1 1,0 0 1,0 0 0,0 1 1)),((0 0 0,0 1 0,0 1 1,0 0 0)),((1 0 1,0 0 1,0 0 0,1 0 1)),((0 0 0,1 0 0,1 0 1,0 0 0)),((1 1 1,1 0 1,0 1 1,1 1 1)),((0 0 1,0 1 1,1 0 1,0 0 1)),((1 0 0,1 1 0,1 1 1,1 0 0)),((1 1 1,1 0 1,1 0 0,1 1 1)),((1 1 1,1 1 0,0 1 1,1 1 1)),((0 1 0,0 1 1,1 1 0,0 1 0)))";
            var polyhedralsurface = (PolyhedralSurface)Wkx.Geometry.Deserialize<WktSerializer>(cubeWkt);
            var wkbTriangulated = Triangulator.Triangulate(polyhedralsurface);
            var polyhedralsurface_after_wkt = wkbTriangulated.AsText();
            Assert.IsTrue(expectedResult == polyhedralsurface_after_wkt);
        }
    }
}