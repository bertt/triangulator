using NUnit.Framework;
using System.IO;
using System.Numerics;
using System.Text;
using Wkx;

namespace Triangulate.Tests
{
    public class Tests
    {
        [Test]
        // testcase: ogc_fid = ogc_fid = 13967 of Delaware dataset
        public void TriangulateWithInteriorRing()
        {
            var wkt = "POLYGON Z ((-75.55329332999997 39.101191216000075 0,-75.55324867699994 39.101184972000055 0,-75.55321256999997 39.101297267000064 0,-75.55286213099998 39.10123284600007 0,-75.55278609799996 39.10147265200004 0,-75.55273937899995 39.10146597100004 0,-75.55273290199995 39.10148368100005 0,-75.55249205599995 39.10143683100006 0,-75.55252592399995 39.101320928000064 0,-75.55243013499995 39.101299453000024 0,-75.55249910199996 39.10107472900006 0,-75.55243817199994 39.10106216400004 0,-75.55260907299999 39.10051940000005 0,-75.55279111499993 39.10055427900005 0,-75.55280219199994 39.10052833700007 0,-75.55342259199995 39.100650028000075 0,-75.55338423099994 39.10078085500004 0,-75.55341641699994 39.100788409000074 0,-75.55329332999997 39.101191216000075 0),(-75.55273513599997 39.101084135000065 0,-75.55288693999995 39.10111439600007 0,-75.55289197899998 39.10110587500003 0,-75.55285487799995 39.10106216400004 0,-75.55288545899998 39.10105070700007 0,-75.55289078899995 39.10104343000006 0,-75.55297369599998 39.10099946400004 0,-75.55302623199998 39.10104551200004 0,-75.55304452299998 39.10102677900005 0,-75.55310796299995 39.100821739000025 0,-75.55282236499994 39.10077075500004 0,-75.55273513599997 39.101084135000065 0))";
            var geom = (Polygon)Geometry.Deserialize<WktSerializer>(Encoding.UTF8.GetBytes(wkt));
            Assert.That(geom.InteriorRings.Count > 0);
            var wkb = geom.AsBinary();
            var wkbResult = Triangulator.Triangulate(wkb);

            // convert to wkt
            var result = (MultiPolygon)Geometry.Deserialize<WkbSerializer>(wkbResult);
            Assert.That(result.Geometries.Count == 29);
        }

        [Test]
        public void NormalTest()
        {
            // Test for a polygon with a normal that is not 0,0,0
            // Bag id: NL.IMBAG.Pand.0289100000020984
            // arrange
            var wkt = "POLYGON Z ((173105.4583575502 444132.6294281028 55.79433985427022,173105.45835767197 444132.62943031423 55.64733954053372,173105.45836112826 444132.6294931242 51.47633953765035,173107.0364873325 444133.3794869664 51.4763396801427,173107.03648509335 444133.3794462814 54.1783398212865,173105.4583575502 444132.6294281028 55.79433985427022))";
            var geom = (Polygon)Geometry.Deserialize<WktSerializer>(Encoding.UTF8.GetBytes(wkt));

            // act
            var normal = geom.GetNormal();

            //assert
            Assert.That(new Vector3(0, 0, 0), Is.Not.EqualTo(normal));
        }

        [Test]
        public void MultipolygonZTriangulateTest()
        {
            // arrange
            var buildingWkt = "MULTIPOLYGON Z(((43603.770435546874 361514.6418164063 1.2790000438690186,43603.50600073242 361509.7590039063 1.2790000438690186,43598.60899755859 361510.0461132813 1.2790000438690186,43603.770435546874 361514.6418164063 1.2790000438690186)),((43599.11101171875 361520.242890625 1.2790000438690186,43604.058002685546 361519.95211914065 1.2790000438690186,43598.85057470703 361514.95309570315 1.2790000438690186,43599.11101171875 361520.242890625 1.2790000438690186)),((43598.85057470703 361514.95309570315 1.2790000438690186,43603.770435546874 361514.6418164063 1.2790000438690186,43598.60899755859 361510.0461132813 1.2790000438690186,43598.85057470703 361514.95309570315 1.2790000438690186)),((43604.058002685546 361519.95211914065 1.2790000438690186,43603.770435546874 361514.6418164063 1.2790000438690186,43598.85057470703 361514.95309570315 1.2790000438690186,43604.058002685546 361519.95211914065 1.2790000438690186)),((43598.60899755859 361510.0461132813 6.778176307678223,43598.85057470703 361514.95309570315 7.397906303405762,43598.85057470703 361514.95309570315 1.2790000438690186,43598.60899755859 361510.0461132813 6.778176307678223)),((43598.60899755859 361510.0461132813 1.2790000438690186,43598.60899755859 361510.0461132813 6.778176307678223,43598.85057470703 361514.95309570315 1.2790000438690186,43598.60899755859 361510.0461132813 1.2790000438690186)),((43603.770435546874 361514.6418164063 1.2790000438690186,43603.50600073242 361509.7590039063 6.764927387237549,43603.50600073242 361509.7590039063 1.2790000438690186,43603.770435546874 361514.6418164063 1.2790000438690186)),((43603.770435546874 361514.6418164063 1.2790000438690186,43603.770435546874 361514.6418164063 7.381703853607178,43603.50600073242 361509.7590039063 6.764927387237549,43603.770435546874 361514.6418164063 1.2790000438690186)),((43598.85057470703 361514.95309570315 1.2790000438690186,43599.11101171875 361520.242890625 6.854876518249512,43599.11101171875 361520.242890625 1.2790000438690186,43598.85057470703 361514.95309570315 1.2790000438690186)),((43598.85057470703 361514.95309570315 1.2790000438690186,43598.85057470703 361514.95309570315 7.397906303405762,43599.11101171875 361520.242890625 6.854876518249512,43598.85057470703 361514.95309570315 1.2790000438690186)),((43604.058002685546 361519.95211914065 6.836284160614014,43603.770435546874 361514.6418164063 7.381703853607178,43603.770435546874 361514.6418164063 1.2790000438690186,43604.058002685546 361519.95211914065 6.836284160614014)),((43604.058002685546 361519.95211914065 1.2790000438690186,43604.058002685546 361519.95211914065 6.836284160614014,43603.770435546874 361514.6418164063 1.2790000438690186,43604.058002685546 361519.95211914065 1.2790000438690186)),((43599.11101171875 361520.242890625 1.2790000438690186,43604.058002685546 361519.95211914065 6.836284160614014,43604.058002685546 361519.95211914065 1.2790000438690186,43599.11101171875 361520.242890625 1.2790000438690186)),((43599.11101171875 361520.242890625 1.2790000438690186,43599.11101171875 361520.242890625 6.854876518249512,43604.058002685546 361519.95211914065 6.836284160614014,43599.11101171875 361520.242890625 1.2790000438690186)),((43603.50600073242 361509.7590039063 6.764927387237549,43598.60899755859 361510.0461132813 6.778176307678223,43598.60899755859 361510.0461132813 1.2790000438690186,43603.50600073242 361509.7590039063 6.764927387237549)),((43603.50600073242 361509.7590039063 1.2790000438690186,43603.50600073242 361509.7590039063 6.764927387237549,43598.60899755859 361510.0461132813 1.2790000438690186,43603.50600073242 361509.7590039063 1.2790000438690186)),((43603.770435546874 361514.6418164063 7.381703853607178,43598.60899755859 361510.0461132813 6.778176307678223,43603.50600073242 361509.7590039063 6.764927387237549,43603.770435546874 361514.6418164063 7.381703853607178)),((43603.770435546874 361514.6418164063 7.381703853607178,43598.85057470703 361514.95309570315 7.397906303405762,43598.60899755859 361510.0461132813 6.778176307678223,43603.770435546874 361514.6418164063 7.381703853607178)),((43604.058002685546 361519.95211914065 6.836284160614014,43598.85057470703 361514.95309570315 7.397906303405762,43603.770435546874 361514.6418164063 7.381703853607178,43604.058002685546 361519.95211914065 6.836284160614014)),((43604.058002685546 361519.95211914065 6.836284160614014,43599.11101171875 361520.242890625 6.854876518249512,43598.85057470703 361514.95309570315 7.397906303405762,43604.058002685546 361519.95211914065 6.836284160614014)))";
            var multipolygon = (MultiPolygon)Geometry.Deserialize<WktSerializer>(buildingWkt);
            var wkb = multipolygon.AsBinary();

            // act
            var wkbResult = Triangulator.Triangulate(wkb);
            var multipolygonResult = (MultiPolygon)Geometry.Deserialize<WkbSerializer>(wkbResult);

            // assert
            Assert.That(multipolygonResult.Geometries.Count == multipolygon.Geometries.Count);
        }


        [Test]
        public void PolyhedralSurfaceTriangulateTest()
        {
            // arrange
            var expected = "POLYHEDRALSURFACE Z (((43603.770435546874 361514.6418164063 1.2790000438690186,43603.50600073242 361509.7590039063 1.2790000438690186,43598.60899755859 361510.0461132813 1.2790000438690186,43603.770435546874 361514.6418164063 1.2790000438690186)),((43599.11101171875 361520.242890625 1.2790000438690186,43604.058002685546 361519.95211914065 1.2790000438690186,43598.85057470703 361514.95309570315 1.2790000438690186,43599.11101171875 361520.242890625 1.2790000438690186)),((43598.85057470703 361514.95309570315 1.2790000438690186,43603.770435546874 361514.6418164063 1.2790000438690186,43598.60899755859 361510.0461132813 1.2790000438690186,43598.85057470703 361514.95309570315 1.2790000438690186)),((43604.058002685546 361519.95211914065 1.2790000438690186,43603.770435546874 361514.6418164063 1.2790000438690186,43598.85057470703 361514.95309570315 1.2790000438690186,43604.058002685546 361519.95211914065 1.2790000438690186)),((43598.60899755859 361510.0461132813 6.778176307678223,43598.85057470703 361514.95309570315 7.397906303405762,43598.85057470703 361514.95309570315 1.2790000438690186,43598.60899755859 361510.0461132813 6.778176307678223)),((43598.60899755859 361510.0461132813 1.2790000438690186,43598.60899755859 361510.0461132813 6.778176307678223,43598.85057470703 361514.95309570315 1.2790000438690186,43598.60899755859 361510.0461132813 1.2790000438690186)),((43603.770435546874 361514.6418164063 1.2790000438690186,43603.50600073242 361509.7590039063 6.764927387237549,43603.50600073242 361509.7590039063 1.2790000438690186,43603.770435546874 361514.6418164063 1.2790000438690186)),((43603.770435546874 361514.6418164063 1.2790000438690186,43603.770435546874 361514.6418164063 7.381703853607178,43603.50600073242 361509.7590039063 6.764927387237549,43603.770435546874 361514.6418164063 1.2790000438690186)),((43598.85057470703 361514.95309570315 1.2790000438690186,43599.11101171875 361520.242890625 6.854876518249512,43599.11101171875 361520.242890625 1.2790000438690186,43598.85057470703 361514.95309570315 1.2790000438690186)),((43598.85057470703 361514.95309570315 1.2790000438690186,43598.85057470703 361514.95309570315 7.397906303405762,43599.11101171875 361520.242890625 6.854876518249512,43598.85057470703 361514.95309570315 1.2790000438690186)),((43604.058002685546 361519.95211914065 6.836284160614014,43603.770435546874 361514.6418164063 7.381703853607178,43603.770435546874 361514.6418164063 1.2790000438690186,43604.058002685546 361519.95211914065 6.836284160614014)),((43604.058002685546 361519.95211914065 1.2790000438690186,43604.058002685546 361519.95211914065 6.836284160614014,43603.770435546874 361514.6418164063 1.2790000438690186,43604.058002685546 361519.95211914065 1.2790000438690186)),((43599.11101171875 361520.242890625 1.2790000438690186,43604.058002685546 361519.95211914065 6.836284160614014,43604.058002685546 361519.95211914065 1.2790000438690186,43599.11101171875 361520.242890625 1.2790000438690186)),((43599.11101171875 361520.242890625 1.2790000438690186,43599.11101171875 361520.242890625 6.854876518249512,43604.058002685546 361519.95211914065 6.836284160614014,43599.11101171875 361520.242890625 1.2790000438690186)),((43603.50600073242 361509.7590039063 6.764927387237549,43598.60899755859 361510.0461132813 6.778176307678223,43598.60899755859 361510.0461132813 1.2790000438690186,43603.50600073242 361509.7590039063 6.764927387237549)),((43603.50600073242 361509.7590039063 1.2790000438690186,43603.50600073242 361509.7590039063 6.764927387237549,43598.60899755859 361510.0461132813 1.2790000438690186,43603.50600073242 361509.7590039063 1.2790000438690186)),((43603.770435546874 361514.6418164063 7.381703853607178,43598.60899755859 361510.0461132813 6.778176307678223,43603.50600073242 361509.7590039063 6.764927387237549,43603.770435546874 361514.6418164063 7.381703853607178)),((43603.770435546874 361514.6418164063 7.381703853607178,43598.85057470703 361514.95309570315 7.397906303405762,43598.60899755859 361510.0461132813 6.778176307678223,43603.770435546874 361514.6418164063 7.381703853607178)),((43604.058002685546 361519.95211914065 6.836284160614014,43598.85057470703 361514.95309570315 7.397906303405762,43603.770435546874 361514.6418164063 7.381703853607178,43604.058002685546 361519.95211914065 6.836284160614014)),((43604.058002685546 361519.95211914065 6.836284160614014,43599.11101171875 361520.242890625 6.854876518249512,43598.85057470703 361514.95309570315 7.397906303405762,43604.058002685546 361519.95211914065 6.836284160614014)))";
            var polyhedralsurface = (PolyhedralSurface)Wkx.Geometry.Deserialize<WktSerializer>(expected);
            var wkb = polyhedralsurface.AsBinary();

            // act
            var polyhedralsurface_after = (PolyhedralSurface)Wkx.Geometry.Deserialize<WkbSerializer>(wkb);
            var polyhedralsurface_after_wkt = polyhedralsurface_after.AsText();

            // assert
            Assert.That(expected == polyhedralsurface_after_wkt);
        }

        [Test]
        public void TriangulateCubeTest()
        {
            // arrange
            var cubeWkt = "POLYHEDRALSURFACE Z (((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)),((0 0 0, 0 1 0, 0 1 1, 0 0 1, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)), ((1 1 1, 1 0 1, 0 0 1, 0 1 1, 1 1 1)),((1 1 1, 1 0 1, 1 0 0, 1 1 0, 1 1 1)),((1 1 1, 1 1 0, 0 1 0, 0 1 1, 1 1 1)))";
            var expectedResult = "POLYHEDRALSURFACE Z (((0 0 0,0 1 0,1 0 0,0 0 0)),((1 1 0,1 0 0,0 1 0,1 1 0)),((0 0 1,0 0 0,0 1 0,0 0 1)),((0 1 0,0 1 1,0 0 1,0 1 0)),((0 0 1,0 0 0,1 0 0,0 0 1)),((1 0 0,1 0 1,0 0 1,1 0 0)),((1 1 1,1 0 1,0 1 1,1 1 1)),((0 0 1,0 1 1,1 0 1,0 0 1)),((1 1 0,1 1 1,1 0 1,1 1 0)),((1 0 1,1 0 0,1 1 0,1 0 1)),((1 1 1,1 1 0,0 1 1,1 1 1)),((0 1 0,0 1 1,1 1 0,0 1 0)))";
            var wkt = Geometry.Deserialize<WktSerializer>(cubeWkt);
            var wkb = wkt.AsBinary();

            // act
            var bytes = Triangulator.Triangulate(wkb);

            // assert
            var wkbResult = Geometry.Deserialize<WkbSerializer>(bytes);
            var polyhedralsurface_after_wkt = wkbResult.AsText();
            Assert.That(expectedResult == polyhedralsurface_after_wkt);
        }

        [Test]
        public void TriangulateWkbTest()
        {
            // arrange
            var buildingWkb = File.ReadAllBytes(@"testdata/building.wkb");

            // act
            var wkbTriangulated = Triangulator.Triangulate(buildingWkb);
            
            // assert
            var polyhedral = (PolyhedralSurface)Geometry.Deserialize<WkbSerializer>(wkbTriangulated);
            Assert.That(polyhedral.Geometries.Count == 22);

            GltfCreator.CreateGltf(polyhedral, @"wkb.gltf");
        }
    }
}